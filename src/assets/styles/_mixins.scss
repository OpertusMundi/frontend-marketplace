@function em($pxval, $base: $baseFontSize) {
    @if not unitless($pxval) {
        $pxval: strip-units($pxval);
    }
    @if not unitless($base) {
        $base: strip-units($base);
    }
    @return ($pxval / $base) * 1em;
}

/* Usage:
@include ratio(16,9);
@include ratio(4,3);
@include ratio(4,4, true);
*/
@mixin ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + "%");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  @if $pseudo {
    &:before {
      content: "";
      display: block;
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

@mixin fluid-type($min-font-size, $max-font-size) {
    $min-vw: 320px;
    $max-vw: 1600px;
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);
  
    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
      & {
        font-size: $min-font-size;
        @media screen and (min-width: $min-vw) {
          font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        }
        @media screen and (min-width: $max-vw) {
          font-size: $max-font-size;
        }
      }
    }
  }

@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}