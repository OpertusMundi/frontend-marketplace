import Api from '@/service/api';

import {
  AxiosPageResponse, AxiosServerResponse, PageResult, ServerResponse,
} from '@/model/response';
import { Sorting } from '@/model/request';
import {
  Order,
} from '@/model/order';
import {
  BankwirePayIn,
  Card, CardDirectPayIn, CardDirectPayInCommand, CardRegistration, CardRegistrationCommand,
  EnumPayInSortField,
  EnumTransactionStatus,
} from '@/model/payment';

/**
 * All service methods require user to have role ROLE_CONSUMER unless otherwise noted
 */
export default class PaymentApi extends Api {
  constructor() {
    super({ withCredentials: true });
  }

  /**
   * Create a new order from the content of the authenticated user's cart.
   * The method requires user to have  role ROLE_CONSUMER.
   *
   * Invoking checkout method multiple times will always return a new order. Only the last created order
   * is valid.
   */
  public async checkout(): Promise<ServerResponse<Order>> {
    const url = '/action/payments/checkout';

    return this.post<void, ServerResponse<Order>>(url)
      .then((response: AxiosServerResponse<Order>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Get all user registered cards
   *
   * For details on integration of the platform with MANGOPAY see:
   * https://docs.mangopay.com/endpoints/v2.01/cards#e177_the-card-registration-object
   *
   * @param page
   * @param size
   * @returns
   */
  public async getCards(page = 0, size = 10): Promise<ServerResponse<Card[]>> {
    const url = `/action/payments/cards?page=${page}&size=${size}`;

    return this.get<ServerResponse<Card[]>>(url)
      .then((response: AxiosServerResponse<Card[]>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Initialize a new card registration.
   *
   * For details on integration of the platform with MANGOPAY see:
   * https://docs.mangopay.com/endpoints/v2.01/cards#e177_the-card-registration-object
   *
   * It is imperative to inform users, that we are registering their card.
   */
  public async createCardRegistration(): Promise<ServerResponse<CardRegistration>> {
    const url = '/action/payments/cards';

    return this.post<void, ServerResponse<CardRegistration>>(url)
      .then((response: AxiosServerResponse<CardRegistration>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Complete card registration
   *
   * For details on integration of the platform with MANGOPAY see:
   * https://docs.mangopay.com/endpoints/v2.01/cards#e177_the-card-registration-object
   *
   * It is imperative to inform users, that we are registering their card.
   *
   * @param command Card registration command
   * @returns
   */
  public async completeCardRegistration(command: CardRegistrationCommand): Promise<ServerResponse<Card>> {
    const url = '/action/payments/cards';

    return this.put<CardRegistrationCommand, ServerResponse<Card>>(url, command)
      .then((response: AxiosServerResponse<Card>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Create a card direct PayIn for a specific order.
   * On successful execution, the server resets the user cart; Hence, the client
   * must either reset the cart locally or invoke [Get Cart](#operation/cart-01).
   * If 3-D Secure validation is required or the operation fails, the cart is not updated.
   *
   * If property secureModeRedirectURL in the response is not empty, 3-D Secure validation
   * is required and the client application must be redirected to the specified link.
   *
   * Once validation is completed, the application is redirected to:
   * https://api.dev.opertusmundi.eu/webhooks/payins/{payInKey}?transactionId={transactionId}
   *
   * The payInKey is the platform unique PayIn key associated with the order. The transactionId
   * is the MANGOPAY unique resource identifier for the new PayIn. The client must query the status
   * of the PayIn using the payInKey.
   *
   * For details on MANGOPAY card direct PayIn see:
   * https://docs.mangopay.com/endpoints/v2.01/payins#e278_create-a-card-direct-payin
   *
   * For details on testing card direct payments see:
   * https://docs.mangopay.com/guide/3ds2-overview
   * https://docs.mangopay.com/guide/3ds2-testing-in-sandbox
   *
   * @param orderKey A unique order key generated by a checkout operation
   * @param command Card direct PayIn command
   * @returns
   */
  public async createCardDirectPayIn(orderKey: string, command: CardDirectPayInCommand): Promise<ServerResponse<CardDirectPayIn>> {
    const url = `/payments/card-direct/${orderKey}`;

    return this.post<CardDirectPayInCommand, ServerResponse<CardDirectPayIn>>(url, command)
      .then((response: AxiosServerResponse<CardDirectPayIn>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Create a bankwire PayIn for a specific order
   * On successful execution, the server resets the user cart; Hence, the client
   * must either reset the cart locally or invoke [Get Cart](#operation/cart-01).
   *
   * For details on MANGOPAY bankwire PayIn see:
   * https://docs.mangopay.com/endpoints/v2.01/payins#e280_create-a-bankwire-direct-payin
   *
   * @param orderKey A unique order key generated by a checkout operation
   * @returns
   */
  public async createBankwirePayIn(orderKey: string): Promise<ServerResponse<BankwirePayIn>> {
    const url = `/payments/bankwire/${orderKey}`;

    return this.put<void, ServerResponse<BankwirePayIn>>(url)
      .then((response: AxiosServerResponse<BankwirePayIn>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Get PayIn details
   *
   * @param payInKey A unique PayIn key
   * @returns
   */
  public async getPayIn(payInKey: string): Promise<ServerResponse<BankwirePayIn | CardDirectPayIn>> {
    const url = `/payments/payins/${payInKey}`;

    return this.get<ServerResponse<BankwirePayIn | CardDirectPayIn>>(url)
      .then((response: AxiosServerResponse<BankwirePayIn | CardDirectPayIn>) => {
        const { data } = response;

        return data;
      });
  }

  /**
   * Search consumer PayIn records (ROLE_CONSUMER is required)
   *
   * @param status
   * @param page
   * @param size
   * @param sorting
   * @returns
   */
  public async findAllConsumerPayIns(
    status: EnumTransactionStatus | null = null, page = 0, size = 10, sorting: Sorting<EnumPayInSortField>,
  ): Promise<AxiosPageResponse<BankwirePayIn | CardDirectPayIn>> {
    const { id: field, order } = sorting;

    const url = `/action/payments/payins/consumer?page=${page}&size=${size}&status=${status || ''}&orderBy=${field}&order=${order}`;

    return this.get<ServerResponse<PageResult<BankwirePayIn | CardDirectPayIn>>>(url);
  }
}
